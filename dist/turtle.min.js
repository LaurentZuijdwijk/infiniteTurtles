(function() {
  var umd,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  umd = function(factory) {
    if (typeof exports === 'object') {
      return module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
      return define([], factory);
    } else {
      this.TURTLE = this.TURTLE || {};
      return this.TURTLE.Color = factory();
    }
  };

  umd(function() {
    var Color;
    return Color = Color = (function() {
      function Color(r1, g1, b1, opacity) {
        this.r = r1;
        this.g = g1;
        this.b = b1;
        this.opacity = opacity != null ? opacity : 1;
        this;
      }

      Color.prototype.toString = function() {
        return "rgba(" + this.r + "," + this.g + "," + this.b + "," + this.opacity + ")";
      };

      Color.prototype.setHue = function(val) {
        var hsl;
        if (val > 360) {
          val = val % 360;
        }
        hsl = this.toHSL();
        hsl.H = val;
        return this.fromHSL(hsl.H, hsl.S, hsl.L);
      };

      Color.prototype.getHue = function() {
        return this.toHSL().H;
      };

      Color.prototype.toHSL = function() {
        var H, L, S, b, delta, delta_B, delta_G, delta_R, g, max, min, r;
        r = this.r / 255;
        g = this.g / 255;
        b = this.b / 255;
        max = Math.max(r, g, b);
        min = Math.min(r, g, b);
        delta = max - min;
        L = (max + min) / 2;
        if (delta === 0) {
          H = 0;
          S = 0;
        } else {
          if (L < 0.5) {
            S = delta / (max + min);
          } else {
            S = delta / (2 - max - min);
          }
          delta_R = (((max - r) / 6) + (delta / 2)) / delta;
          delta_G = (((max - g) / 6) + (delta / 2)) / delta;
          delta_B = (((max - b) / 6) + (delta / 2)) / delta;
          if (r === max) {
            H = delta_B - delta_G;
          } else if (g === max) {
            H = (1 / 3) + delta_R - delta_B;
          } else if (b === max) {
            H = (2 / 3) + delta_G - delta_R;
          }
        }
        if (H < 0) {
          H += 1;
        }
        if (H > 1) {
          H -= 1;
        }
        return {
          H: H * 360,
          S: S * 100,
          L: L * 100
        };
      };

      Color.prototype.fromHSL = function(H, S, L) {
        var Hue_2_RGB, var_1, var_2;
        Hue_2_RGB = function(v1, v2, vH) {
          if (vH < 0) {
            vH += 1;
          }
          if (vH > 1) {
            vH -= 1;
          }
          if ((6 * vH) < 1) {
            return v1 + (v2 - v1) * 6 * vH;
          }
          if ((2 * vH) < 1) {
            return v2;
          }
          if ((3 * vH) < 2) {
            return v1 + (v2 - v1) * ((2 / 3) - vH) * 6;
          }
          return v1;
        };
        H = H / 360;
        S = S / 100;
        L = L / 100;
        if (S === 0) {
          this.r = L * 255;
          this.g = L * 255;
          this.b = L * 255;
        } else {
          if (L < 0.5) {
            var_2 = L * (1 + S);
          } else {
            var_2 = (L + S) - (S * L);
          }
          var_1 = 2 * L - var_2;
          this.r = 255 * Hue_2_RGB(var_1, var_2, H + (1 / 3));
          this.g = 255 * Hue_2_RGB(var_1, var_2, H);
          this.b = 255 * Hue_2_RGB(var_1, var_2, H - (1 / 3));
        }
        return [this.r, this.g, this.b];
      };

      return Color;

    })();
  });

  umd = function(factory) {
    if (typeof exports === 'object') {
      return module.exports = factory(require('./color'));
    } else if (typeof define === 'function' && define.amd) {
      return define(['color'], factory);
    } else {
      this.TURTLE = this.TURTLE || {};
      return this.TURTLE.TurtleDrawer = factory(this.TURTLE.Color);
    }
  };

  umd(function(Color) {
    var OffsetColorDrawer, TurtleDrawer;
    TurtleDrawer = (function() {
      TurtleDrawer.prototype.angle = 0;

      TurtleDrawer.prototype.x = 800;

      TurtleDrawer.prototype.y = 200;

      TurtleDrawer.prototype._color = new Color(0, 0, 0, 1.0);

      TurtleDrawer.prototype._lineWidth = 1;

      function TurtleDrawer(canvas1) {
        this.canvas = canvas1;
        this.lineWidth = bind(this.lineWidth, this);
        this.forward = bind(this.forward, this);
        this.ctx = this.canvas.getContext('2d');
      }

      TurtleDrawer.prototype.finish = function() {};

      TurtleDrawer.prototype.forward = function(px, mod) {
        this.ctx.beginPath();
        this.ctx.moveTo(this.x, this.y);
        this.ctx.lineWidth = this._lineWidth;
        this.ctx.strokeStyle = this._color.toString();
        this.x += (px + mod) * Math.cos(this.angle * (Math.PI / 180));
        this.y += (px + mod) * Math.sin(this.angle * (Math.PI / 180));
        this.ctx.lineTo(this.x, this.y);
        this.ctx.stroke();
        return this;
      };

      TurtleDrawer.prototype.color = function(color, mod) {
        this._color = color;
        return this;
      };

      TurtleDrawer.prototype.moveX = function(x, mod) {
        if (mod == null) {
          mod = 0;
        }
        this.x += x + mod;
        return this;
      };

      TurtleDrawer.prototype.moveY = function(y, mod) {
        if (mod == null) {
          mod = 0;
        }
        this.y += y + mod;
        return this;
      };

      TurtleDrawer.prototype.setX = function(x, mod) {
        if (mod == null) {
          mod = 0;
        }
        this.x = x + mod;
        return this;
      };

      TurtleDrawer.prototype.setY = function(y, mod) {
        if (mod == null) {
          mod = 0;
        }
        this.y = y + mod;
        return this;
      };

      TurtleDrawer.prototype.lineWidth = function(px, mod) {
        this._lineWidth = px + mod;
        return this;
      };

      TurtleDrawer.prototype.turn = function(deg, mod) {
        this.angle += deg + mod;
        return this;
      };

      return TurtleDrawer;

    })();
    OffsetColorDrawer = (function(superClass) {
      extend(OffsetColorDrawer, superClass);

      function OffsetColorDrawer(canvas) {
        var fn, i, j, name, ref;
        this.offsetX = 30;
        this.offsetY = 30;
        this.drawers = [];
        for (i = j = 0; j <= 2; i = j += 1) {
          this.drawers[i] = new TurtleDrawer(canvas);
        }
        ref = new TurtleDrawer(canvas);
        for (name in ref) {
          fn = ref[name];
          if (typeof fn === 'function') {
            (function(_this) {
              return (function(name, fn) {
                return _this[name] = function() {
                  var _arg, drawer, k, len, ref1, results;
                  _arg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
                  ref1 = this.drawers;
                  results = [];
                  for (k = 0, len = ref1.length; k < len; k++) {
                    drawer = ref1[k];
                    results.push((function(drawer) {
                      return drawer[name].apply(drawer, _arg);
                    })(drawer));
                  }
                  return results;
                };
              });
            })(this)(name, fn);
          }
        }
        this.color = function(_color, mod) {
          this._color = _color;
          this.drawers[0].color(new Color(this._color.r, 0, 0, this._color.opacity / 3));
          this.drawers[1].color(new Color(0, this._color.g, 0, this._color.opacity / 3));
          this.drawers[2].color(new Color(0, 0, this._color.b, this._color.opacity / 3));
          return this;
        };
        this.setX = function(x, mod) {
          if (mod == null) {
            mod = 0;
          }
          this.drawers[0].setX(x, mod);
          this.drawers[1].setX(x + this.offsetX, mod);
          this.drawers[2].setX(x + this.offsetX * 2, mod);
          return this;
        };
        this.moveX = function(x, mod) {
          if (mod == null) {
            mod = 0;
          }
          this.drawers[0].moveX(x, mod);
          this.drawers[1].moveX(x + this.offsetX, mod);
          this.drawers[2].moveX(x + this.offsetX * 2, mod);
          return this;
        };
        this.setY = function(y, mod) {
          if (mod == null) {
            mod = 0;
          }
          this.drawers[0].setY(y, mod);
          this.drawers[1].setY(y + this.offsetY, mod);
          this.drawers[2].setY(y + this.offsetY * 2, mod);
          return this;
        };
        this.moveY = function(y, mod) {
          if (mod == null) {
            mod = 0;
          }
          this.drawers[0].moveY(y, mod);
          this.drawers[1].moveY(y + this.offsetY, mod);
          this.drawers[2].moveY(y + this.offsetY * 2, mod);
          return this;
        };
        this;
      }

      return OffsetColorDrawer;

    })(TurtleDrawer);
    return TurtleDrawer;
  });

  umd = function(factory) {
    if (typeof exports === 'object') {
      return module.exports = factory(require('./turtle-drawer'));
    } else if (typeof define === 'function' && define.amd) {
      return define(['turtle-drawer'], factory);
    } else {
      this.TURTLE = this.TURTLE || {};
      return this.TURTLE.Turtle = factory(this.TURTLE.TurtleDrawer);
    }
  };

  umd(function(TurtleDrawer) {
    var Turtle;
    return Turtle = (function() {
      function Turtle(canvasId) {
        this.canvasId = canvasId;
        this.keepDrawing = bind(this.keepDrawing, this);
        this.doDraw = bind(this.doDraw, this);
        this.draw = bind(this.draw, this);
        this.job = bind(this.job, this);
        this.canvas = document.getElementById(this.canvasId);
        this.ctx = this.canvas.getContext('2d');
        this.ctx.globalCompositeOperation = "screen";
        this.drawer = new TurtleDrawer(this.canvas);
        this.commands = [];
      }

      Turtle.prototype.background = function(val) {
        var h, w;
        w = this.canvas.width;
        h = this.canvas.height;
        this.ctx.fillStyle = val;
        return this.ctx.fillRect(0, 0, w, h);
      };

      Turtle.prototype.job = function(fn) {
        var Job, turtle;
        turtle = this;
        Job = (function() {
          function Job(fn1) {
            this.fn = fn1;
          }

          Job.prototype.before = function() {};

          Job.prototype.run = function() {
            this.beforeEach.apply(turtle);
            return this.fn.apply(turtle);
          };

          return Job;

        })();
        return new Job(fn);
      };

      Turtle.prototype.forward = function(px, mod) {
        if (mod == null) {
          mod = 0;
        }
        this.commands.push({
          fn: this.drawer.forward,
          args: px,
          mod: mod
        });
        return this;
      };

      Turtle.prototype.turn = function(deg, mod) {
        if (mod == null) {
          mod = 0;
        }
        this.commands.push({
          fn: this.drawer.turn,
          args: deg,
          mod: mod
        });
        return this;
      };

      Turtle.prototype.color = function(color, mod) {
        this.commands.push({
          fn: this.drawer.color,
          args: color,
          mod: mod
        });
        return this;
      };

      Turtle.prototype.lineWidth = function(px, mod) {
        this.commands.push({
          fn: this.drawer.lineWidth,
          args: px,
          mod: mod
        });
        return this;
      };

      Turtle.prototype.moveX = function(x, mod) {
        this.commands.push({
          fn: this.drawer.moveX,
          args: x,
          mod: mod
        });
        return this;
      };

      Turtle.prototype.moveY = function(y, mod) {
        this.commands.push({
          fn: this.drawer.moveY,
          args: y,
          mod: mod
        });
        return this;
      };

      Turtle.prototype.setX = function(x, mod) {
        this.commands.push({
          fn: this.drawer.setX,
          args: x,
          mod: mod
        });
        return this;
      };

      Turtle.prototype.setY = function(y, mod) {
        this.commands.push({
          fn: this.drawer.setY,
          args: y,
          mod: mod
        });
        return this;
      };

      Turtle.prototype.draw = function(repeat) {
        this.n = 0;
        this.drawing = true;
        if (repeat) {
          return this.doDraw(repeat);
        } else {
          return this.keepDrawing();
        }
      };

      Turtle.prototype.stop = function() {
        this.drawing = false;
        return this.drawer.finish();
      };

      Turtle.prototype.doDraw = function(repeat) {
        var command, i, j, k, len, mod, ref, ref1;
        for (i = j = 1, ref = repeat; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
          ref1 = this.commands;
          for (k = 0, len = ref1.length; k < len; k++) {
            command = ref1[k];
            if (typeof command.mod === 'number') {
              mod = command.mod ? command.mod * i : 1;
              command.fn.apply(this.drawer, [command.args, mod]);
            } else if (typeof command.mod === 'function') {
              command.fn.apply(this.drawer, [command.args, command.mod(i)]);
            } else {
              command.fn.apply(this.drawer, [command.args]);
            }
          }
        }
        return this.stop();
      };

      Turtle.prototype.keepDrawing = function() {
        var command, i, j, k, len, mod, ref;
        if (!this.drawing) {
          return;
        }
        for (i = j = 0; j <= 10; i = ++j) {
          this.n = this.n + 1;
          ref = this.commands;
          for (k = 0, len = ref.length; k < len; k++) {
            command = ref[k];
            if (typeof command.mod === 'number') {
              mod = command.mod ? command.mod * this.n : 1;
              command.fn.apply(this.drawer, [command.args, mod]);
            } else if (typeof command.mod === 'function') {
              command.fn.apply(this.drawer, [command.args, command.mod(this.n)]);
            } else {
              command.fn.apply(this.drawer, [command.args]);
            }
          }
        }
        window.requestAnimationFrame((function(_this) {
          return function() {
            return _this.keepDrawing();
          };
        })(this));
        return this;
      };

      Turtle.prototype.finish = function() {
        this.drawer.finish();
        return this;
      };

      return Turtle;

    })();
  });

}).call(this);
